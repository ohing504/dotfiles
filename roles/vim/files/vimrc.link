"""General

""DISPLAY
set cursorline                      "Highlight the screen line of the cursor
"set linebreak                       "Break lines at word (requires Wrap lines)
set number                          "Show line numbers
set numberwidth=4                   "Number of line number width
set showbreak=+++                   "Wrap-broken line prefix
set showmatch                       "Highlight matching brace
"set spell                           "Enable spell-checking
"set textwidth=100                   "Line wrap (number of cols)
set visualbell                      "Use visual bell (no beeping)
syntax on                           "Enable syntax highlighting

""FIND AND REPLACE
set hlsearch                        "Highlight all search results
set ignorecase                      "Always case-insensitive
set incsearch                       "Searches for strings incrementally
set smartcase                       "Enable smart-case search

""INDENTATION
set autoindent                      "Auto-indent new lines
set cindent                         "Use 'C' style program indenting
set expandtab                       "Use spaces instead of tabs
set shiftwidth=4                    "Number of auto-indent spaces
set smartindent                     "Enable smart-indent
set smarttab                        "Enable smart-tabs
set softtabstop=4                   "Number of spaces per Tab
set tabstop=4                       "Number of spaces that a Tab

"""Advanced

""WINDOW
set ruler                           "Show row and column ruler information

""STATUS LINE
set laststatus=2                    "Always display status line

"Set status line format
function! GitBranch()
    return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
    let l:branchname = GitBranch()
    return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#SpellRare#        "Set highlight group
set statusline+=%{StatuslineGit()}  "Git branch name
set statusline+=%#StatusLine#       "Set highlight group
set statusline+=%<                  "Where to truncate line if too long
set statusline+=%f                  "Path to the file in the buffer
set statusline+=\ %h                "Help buffer flag, text is '[help]'
set statusline+=%m                  "Modified flag, text is '[+]'; '[-]'
set statusline+=%r                  "Readonly flag, text is '[RO]'
set statusline+=%=                  "Separation point between left and right aligned items
set statusline+=%y                  "File type
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}  "File encoding
set statusline+=\ [%{&fileformat}\] "File format
"Column number, Virtual column number as -{num}, Position, Line number, Total Line number
set statusline+=\ %-28.(col:%c%V\ pos:%o\ line:%l\,%L%)
set statusline+=\ %P                "Percentage through file of displayed window


""MISCELLANEOUS
autocmd Filetype gitcommit setlocal spell textwidth=72  "Git commit message
set backspace=indent,eol,start      "Backspace behaviour
set history=1000                    "Number of lines that are remembered
set undolevels=1000                 "Number of undo levels


"""Generated by VimConfig.com

""Modeline
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

set modeline
set modelines=5
